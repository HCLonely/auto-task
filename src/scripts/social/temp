function getI18n(...e){
  return `{${e.join('-')}}`
}
const debug = true
function echoLog(e) {
  try {
    let ele = null;
    switch (e.type) {
    case 'updateSteamCommunity':
      ele = $(`<li>${getI18n('updateCommunityId')}<font></font></li>`);
      break;
    case 'updateSteamStore':
      ele = $(`<li>${getI18n('updateStoreId')}<font></font></li>`);
      break;
    case 'joinSteamGroup':
    case 'leaveSteamGroup':
    case 'getSteamGroupId':
      ele = $(`<li>${getI18n(e.type)}<a href="https://steamcommunity.com/groups/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'subscribeForum':
    case 'unsubscribeForum':
    case 'getForumId':
      ele = $(`<li>${getI18n(e.type)}<a href="https://steamcommunity.com/app/${e.text}/discussions/" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'followCurator':
    case 'unfollowCurator':
    case 'getCuratorId':
      ele = $(`<li>${getI18n(e.type)}<a href="https://store.steampowered.com/${e.text.includes('/') ? e.text : `curator/${e.text}`}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'getDeveloperId':
    case 'followDeveloper':
    case 'unfollowDeveloper':
      ele = $(`<li>${getI18n(e.type)}<a href="https://store.steampowered.com/developer/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'getPublisherId':
    case 'followPublisher':
    case 'unfollowPublisher':
      ele = $(`<li>${getI18n(e.type)}<a href="https://store.steampowered.com/publisher/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'getFranchiseId':
    case 'followFranchise':
    case 'unfollowFranchise':
      ele = $(`<li>${getI18n(e.type)}<a href="https://store.steampowered.com/franchise/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'addWishlist':
    case 'removeWishlist':
    case 'followGame':
    case 'unfollowGame':
      ele = $(`<li>${getI18n(e.type)}<a href="https://store.steampowered.com/app/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'favoriteWorkshop':
    case 'unfavoriteWorkshop':
    case 'getWorkshopAppId':
    case 'voteupWorkshop':
      ele = $(`<li>${getI18n(e.type)}<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'likeAnnouncements':
      ele = $(`<li>${getI18n('likeAnnouncements')}<a href="${e.url}" target="_blank">${e.id}</a>...<font></font></li>`);
      break;
    case 'changeCountry':
      ele = $(`<li>${getI18n('changeCountry')}${e.text}...<font></font></li>`);
      break;
    case 'joinDiscordServer':
    case 'leaveDiscordServer':
    case 'getDiscordGuild':
      ele = $(`<li>${getI18n(e.type)}<a href="https://discord.com/invite/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'updateDiscordAuth':
      ele = $(`<li style="color:red;">${getI18n('updateDiscordAuth')}</li>`);
      break;
    case 'followTwitchChannel':
    case 'unfollowTwitchChannel':
    case 'getTwitchChannelId':
      ele = $(`<li>${getI18n(e.type)}<a href="https://www.twitch.tv/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'getInsInfo':
      ele = $(`<li>${getI18n('getInsInfo')}<a href="https://www.instagram.com/${e.text}/" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'followIns':
    case 'unfollowIns':
      ele = $(`<li>${getI18n(e.type)}<a href="https://www.instagram.com/${e.text}/" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'getTwitterUserId':
    case 'followTwitterUser':
    case 'unfollowTwitterUser':
      ele = $(`<li>${getI18n(e.type)}<a href="https://twitter.com/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'retweet':
    case 'unretweet':
      ele = $(`<li>${getI18n(e.type)}${e.text}...<font></font></li>`);
      break;
    case 'joinReddit':
    case 'leaveReddit':
      ele = $(`<li>${getI18n(e.type)}<a href="https://www.reddit.com/r/${e.text}/" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'followRedditUser':
    case 'unfollowRedditUser':
      ele = $(`<li>${getI18n(e.type)}<a href="https://www.reddit.com/user/${e.text.replace('u_', '')}" target="_blank">${e.text.replace('u_', '')}</a>...<font></font></li>`);
      break;
    case 'followYtbChannel':
    case 'unfollowYtbChannel':
      ele = $(`<li>${getI18n(e.type)}<a href="https://www.youtube.com/channel/${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'likeYtbVideo':
    case 'unlikeYtbVideo':
      ele = $(`<li>${getI18n(e.type)}<a href="https://www.youtube.com/watch?v=${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'getVkId':
    case 'joinVkGroup':
    case 'leaveVkGroup':
    case 'joinVkPublic':
    case 'leaveVkPublic':
    case 'repostVkWall':
      ele = $(`<li>${getI18n(e.type)}<a href="https://vk.com/${e.text}/" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'visitLink':
      ele = $(`<li>${getI18n('visitLink')}<a href="${e.text}" target="_blank">${e.text}</a>...<font></font></li>`);
      break;
    case 'text':
      ele = $(`<li>${getI18n(e.text)}<font></font></li>`);
      break;
    case 'custom':
      ele = $(e.text);
      break;
    default:
      ele = $(`<li>${getI18n('unknown')}:${e.type}...<font></font></li>`);
      break;
    }
    ele.addClass('card-text');
    $('body').append(ele);
    ele[0].scrollIntoView();
    const font = ele.find('font');
    const status = {
      font,
      success(text = 'Success', html = false) {
        this.font.attr('class', '').addClass('success');
        html ? this.font.html(text) : this.font.text(text);
      },
      error(text = 'Error', html = false) {
        this.font.attr('class', '').addClass('error');
        html ? this.font.html(text) : this.font.text(text);
      },
      warning(text = 'Warning', html = false) {
        this.font.attr('class', '').addClass('warning');
        html ? this.font.html(text) : this.font.text(text);
      },
      info(text = 'Info', html = false) {
        this.font.attr('class', '').addClass('info');
        html ? this.font.html(text) : this.font.text(text);
      },
      scrollIntoView() {
        this.font[0].scrollIntoView();
      }
    };
    return status;
  } catch (e) {
    throwError(e, 'echoLog');
  }
}
function throwError(e, name) {

  console.log('%c%s', 'color:white;background:red', `${name}\n${e.stack}`);
}

function delay(time = 1000) {
  return new Promise((resolve) => {
    setTimeout(() => { resolve(); }, time);
  });
}
function unique(e) {
  try {
    return [...new Set(e)];
  } catch (e) {
    throwError(e, 'unique');
  }
}

function httpRequest(options, times = 0) {
  return new Promise(resolve => {
    options.method = options.method.toUpperCase()
    if (options.dataType) options.responseType = options.dataType
    const requestObj = Object.assign({
      timeout: 30000,
      ontimeout(data) {
        resolve({ result: 'Error', statusText: 'Timeout', status: 601, data, options })
      },
      onabort(data) {
        resolve({ result: 'Error', statusText: 'Aborted', status: 602, data, options })
      },
      onerror(data) {
        resolve({ result: 'Error', statusText: 'Error', status: 603, data, options })
      },
      onload(data) {
        resolve({ result: 'Success', statusText: 'Load', status: 600, data, options })
      }
    }, options)
    GM_xmlhttpRequest(requestObj)
  }).then(async result => {
    if (debug) console.log('发送请求:', result)
    if (result.status !== 600 && times < 2) {
      return await httpRequest(options, ++times)
    } else {
      return result
    }
  }).catch(error => {
    throwError(error, 'httpRequest')
    if (debug) console.log('发送请求:', { errorMsg: error, options })
    return { result: 'JsError', statusText: 'Error', status: 604, error, options }
  })
}
/*
class Discord {
  // TODO: 任务识别
  constructor(args) {
    this.tasks = {
      servers: [] // 读取
    };
    this.whiteList = []; // 读取
    this.inviteId2Guild = GM_getValue('discordCache') || {}; // eslint-disable-line new-cap
    this.authorization = GM_getValue('discordAuth'); // eslint-disable-line new-cap
  }

  async init() {
    try {
      if (!this.authorization) {
        echoLog({ type: 'updateDiscordAuth' });
        return false;
      }
      const isVerified = await this.verifyAuth();
      if (isVerified) {
        echoLog({ text: 'Init discord success!' });
        return true;
      }
      echoLog({ type: 'updateDiscordAuth' });
      return false;
    } catch (error) {
      throwError(error, 'Discord.init');
      return false;
    }
  }

  // 验证discord凭证是否失效
  async verifyAuth() {
    try {
      const logStatus = echoLog({ type: 'text', text: 'verifyDiscordAuth' });
      const { result, statusText, status, data } = await httpRequest({
        url: 'https://discord.com/api/v6/users/@me',
        method: 'HEAD',
        headers: { authorization: this.authorization }
      });
      if (result === 'Success') {
        if (data.status === 200) {
          logStatus.success();
          return true;
        }
        logStatus.error(`Error:${data.statusText}(${data.status})`);
        return false;
      }
      logStatus.error(`${result}:${statusText}(${status})`);
      return false;
    } catch (error) {
      throwError(error, 'Discord.verifyAuth');
      return false;
    }
  }

  async joinServer(inviteId) {
    try {
      const logStatus = echoLog({ type: 'joinDiscordServer', text: inviteId });
      const { result, statusText, status, data } = await httpRequest({
        url: `https://discord.com/api/v6/invites/${inviteId}`,
        method: 'POST',
        dataType: 'json',
        headers: { authorization: this.authorization }
      });
      if (result === 'Success' && data.status === 200) {
        logStatus.success();
        const guild = data.response?.guild?.id;
        if (guild) {
          // TODO: 优化
          this.addId(inviteId, guild);
          this.tasks.servers = unique([...this.tasks.servers, inviteId]);
        }
        return true;
      }
      logStatus.error(`${result}:${statusText}(${status})`);
      return false;
    } catch (error) {
      throwError(error, 'Discord.joinServer');
      return false;
    }
  }

  async leaveServer(inviteId) {
    try {
      if (this.whiteList.includes(inviteId)) {
        // TODO: 直接echo
        // return { result: 'Skiped', statusText: 'OK', status: 605 }
      }
      const guild = await this.getGuild(inviteId);
      if (!guild) {
        return false;
      }
      const logStatus = echoLog({ type: 'leaveDiscordServer', text: inviteId });
      const { result, statusText, status, data } = await httpRequest({
        url: `https://discord.com/api/v6/users/@me/guilds/${guild}`,
        method: 'DELETE',
        headers: { authorization: this.authorization }
      });
      if (result === 'Success' && data.status === 204) {
        logStatus.success();
        return true;
      }
      logStatus.error(`${result}:${statusText}(${status})`);
      return false;
    } catch (error) {
      throwError(error, 'Discord.leaveServer');
      return false;
    }
  }

  async getGuild(inviteId) {
    try {
      const logStatus = echoLog({ type: 'getDiscordGuild', text: inviteId });
      const guild = this.getId(inviteId);
      if (guild) {
        logStatus.success();
        return guild;
      }
      const { result, statusText, status, data } = await httpRequest({
        url: `https://discord.com/invite/${inviteId}`,
        method: 'GET'
      });
      if (result === 'Success' && data.status === 200) {
        const guild = data.responseText.match(/https?:\/\/cdn\.discordapp\.com\/icons\/([\d]+?)\//)?.[1];
        if (guild) {
          logStatus.success();
          this.addId(inviteId, guild);
          return guild;
        }
        logStatus.error(`${result}:${statusText}(${status})`);
        return false;
      }
      logStatus.error(`${result}:${statusText}(${status})`);
      return false;
    } catch (error) {
      throwError(error, 'Discord.getGuild');
      return false;
    }
  }

  // 通用
  getRealParams(name, params, links, doTask, link2param) {
    try {
      let realParams = [];
      if (params.length > 0) {
        realParams = [...params];
      }
      if (links.length > 0) {
        realParams = [
          ...realParams,
          ...links
            .map((link) => link2param(link))
            .filter((link) => link)
        ];
      }
      if (!doTask && this.tasks[name].length > 0) {
        realParams = [
          ...realParams,
          ...this.tasks[name]
        ];
      }
      return unique(realParams);
    } catch (error) {
      throwError(error, 'Twitter.getRealParams');
      return [];
    }
  }

  async toggleServers({ doTask = true, servers = [], serverLinks = [] }) {
    try {
      const prom = [];
      const realServers = this.getRealParams('servers', servers, serverLinks, doTask, (link) => link.match(/invite\/(.+)/)?.[1]);
      if (realServers.length > 0) {
        for (const server of realServers) {
          prom.push(this[doTask ? 'joinServer' : 'leaveServer'](server));
          await delay(1000);
        }
      }
      // TODO: 返回值处理
      return Promise.all(prom);
    } catch (error) {
      throwError(error, 'Discord.toggleServers');
      return false;
    }
  }

  addId(inviteId, guild) {
    this.inviteId2Guild[inviteId] = guild;
    GM_setValue('discordCache', this.inviteId2Guild); // eslint-disable-line new-cap
  }

  getId(inviteId) {
    return this.inviteId2Guild[inviteId];
  }
  // TODO: id转换
}

unsafeWindow.discord = new Discord()
*/
