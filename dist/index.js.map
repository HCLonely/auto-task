{"version":3,"sources":["webpack://auto-task-new/webpack/bootstrap","webpack://auto-task-new/webpack/runtime/make namespace object","webpack://auto-task-new/./src/scripts/tools/throwError.ts","webpack://auto-task-new/./src/scripts/tools/tools.ts","webpack://auto-task-new/./src/scripts/social/Social.ts","webpack://auto-task-new/./src/scripts/tools/httpRequest.ts","webpack://auto-task-new/./src/scripts/i18n/i18n.ts","webpack://auto-task-new/./src/scripts/echoLog.ts","webpack://auto-task-new/./src/scripts/social/Discord.ts","webpack://auto-task-new/./src/scripts/social/Instagram.ts","webpack://auto-task-new/./src/scripts/social/Reddit.ts","webpack://auto-task-new/./src/scripts/social/Twitch.ts","webpack://auto-task-new/./src/scripts/social/Twitter.ts","webpack://auto-task-new/./src/scripts/social/Vk.ts","webpack://auto-task-new/./src/scripts/social/Youtube.ts","webpack://auto-task-new/./src/index.ts"],"names":["__webpack_require__","r","Symbol","toStringTag","Object","defineProperty","exports","value","throwError","error","name","console","log","stack","unique","array","Set","e","delay","time","Promise","resolve","setTimeout","getRealParams","params","links","doTask","link2param","realParams","length","map","link","filter","this","tasks","httpRequest","options","times","dataType","responseType","requestObj","timeout","ontimeout","data","result","statusText","status","onabort","onerror","onload","GM_xmlhttpRequest","errorMsg","getI18n","argvs","join","echoLog","type","text","url","id","ele","$","includes","replace","addClass","append","scrollIntoView","font","find","success","html","attr","warning","info","view","GM_getValue","servers","whiteList","discord","cache","auth","init","updateAuth","verifyAuth","isVerified","GM_setValue","logStatus","method","headers","authorization","newTab","GM_openInTab","active","insert","setParent","onclose","joinServer","inviteId","guild","String","response","addId","leaveServer","getGuild","getId","responseText","match","toggleServers","serverLinks","prom","realServers","server","push","all","then","users","instagram","getUserInfo","finalUrl","csrftoken","hash","followUser","origin","referer","feedback_message","unfollowUser","toggle","userLinks","realUsers","username","reddits","reddit","updateToken","nochche","accessToken","token","toggleTask","test","param","action","sr_name","api_type","redditLinks","realReddits","userName","channels","twitch","verifyToken","Authorization","authToken","clientId","currentUser","notice","Cookies","get","isLogin","commonOptions","Swal","fire","title","icon","toggleChannel","getChannelId","channelId","followData","unfollowData","user","channelLinks","realChannels","channel","retweets","likes","twitter","window","location","href","ct0","close","toggleUser","getUserId","userId","include_profile_interstitial_type","include_blocking","include_blocked_by","include_followed_by","include_want_retweets","include_mute_edge","include_can_dm","include_can_media_tag","skip_status","anonymous","JSON","parse","rest_id","toggleRetweet","retweetId","tweet_mode","errors","code","retweetLinks","realRetweets","retweet","groups","publics","walls","vk","toggleGroup","dataParam","groupAct","reqData","act","al","gid","groupId","groupHash","context","togglePublic","publicJoined","pid","publicPid","publicHash","toggleWall","object","Message","close_comments","friends_only","from","list","mark_as_ads","mute_notifications","ret_data","to","resultR","statusTextR","statusR","dataR","jsonData","payload","share_my","toggleVk","formatName","names","nameLinks","realNames","youtube","getInfo","needLogin","apiKey","client","request","hl","videoId","likeParams","getToken","PAPISID","nowTime","parseInt","Date","getTime","visitorData","sha1","stringify","sessionId","internalExperimentFlags","consistencyTokenJars","channelIds","toggleLikeVideo","likeVideoData","target","videoLinks","realLikes","video","hostname","search","localStorage","getItem","unsafeWindow","Discord","Instagram","Reddit","Twitch","Twitter","Vk","Youtube"],"mappings":"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","file":"index.js","sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-13 14:08:18\r\n * @LastEditTime : 2021-10-13 14:11:51\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/tools/throwError.ts\r\n * @Description  : 错误处理函数\r\n */\r\n\r\nexport default function throwError(error:Error, name:string):void {\r\n  console.log('%c%s', 'color:white;background:red', `${name}\\n${error.stack}`);\r\n}\r\n","/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-26 14:58:11\r\n * @LastEditTime : 2021-10-26 15:01:18\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/tools/mini.ts\r\n * @Description  :\r\n */\r\nimport throwError from \"./throwError\";\r\nfunction unique(array:Array<any>):Array<any> {\r\n  try {\r\n    return [...new Set(array)];\r\n  } catch (e) {\r\n    throwError(e, 'unique');\r\n    return [];\r\n  }\r\n}\r\n\r\nfunction delay(time:number = 1000):Promise<true> {\r\n  return new Promise(resolve => {\r\n    setTimeout(() => { resolve(true) }, time)\r\n  })\r\n}\r\n\r\nexport { unique, delay }\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-15 10:48:42\r\n * @LastEditTime : 2021-10-28 16:33:30\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Social.ts\r\n * @Description  :\r\n */\r\nimport throwError from '../tools/throwError';\r\nimport { unique } from '../tools/tools';\r\n\r\nclass Social {\r\n  tasks: socialTasks;\r\n  whiteList: socialTasks;\r\n  auth: auth;\r\n  cache: cache;\r\n\r\n  // 通用\r\n  getRealParams(name: string, params: Array<string>, links: Array<string>, doTask: boolean, link2param: (link: string) => string): Array<string> {\r\n    try {\r\n      let realParams = [];\r\n      if (params.length > 0) {\r\n        realParams = [...params];\r\n      }\r\n      if (links.length > 0) {\r\n        realParams = [\r\n          ...realParams,\r\n          ...links\r\n            .map((link) => link2param(link))\r\n            .filter((link) => link)\r\n        ];\r\n      }\r\n      if (!doTask && this.tasks[name].length > 0) {\r\n        realParams = [\r\n          ...realParams,\r\n          ...this.tasks[name]\r\n        ];\r\n      }\r\n      return unique(realParams);\r\n    } catch (error) {\r\n      throwError(error, 'Social.getRealParams');\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default Social;\r\n","/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-13 13:55:36\r\n * @LastEditTime : 2021-10-13 14:14:31\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/tools/httpRequest.ts\r\n * @Description  : http请求函数封装\r\n */\r\nimport throwError from './throwError'\r\nasync function httpRequest(options: httpRequestOptions, times: number = 0): Promise<httpResponse> {\r\n  try {\r\n    const result = await new Promise<httpResponse>(resolve => {\r\n      if (options.dataType) {\r\n        options.responseType = options.dataType\r\n      }\r\n      const requestObj: httpRequestOptions = {\r\n        ...{\r\n          timeout: 30000,\r\n          ontimeout(data) {\r\n            resolve({ result: 'Error', statusText: 'Timeout', status: 601, data, options })\r\n          },\r\n          onabort(data) {\r\n            resolve({ result: 'Error', statusText: 'Aborted', status: 602, data, options })\r\n          },\r\n          onerror(data) {\r\n            resolve({ result: 'Error', statusText: 'Error', status: 603, data, options })\r\n          },\r\n          onload(data) {\r\n            resolve({ result: 'Success', statusText: 'Load', status: 600, data, options })\r\n          }\r\n        }, ...options\r\n      }\r\n      GM_xmlhttpRequest(requestObj)\r\n    })\r\n    console.log('发送请求:', result)\r\n    if (result.status !== 600 && times < 2) {\r\n      return await httpRequest(options, ++times)\r\n    } else {\r\n      return result\r\n    }\r\n  } catch (error) {\r\n    throwError(error, 'httpRequest')\r\n    console.log('发送请求:', { errorMsg: error, options })\r\n    return { result: 'JsError', statusText: 'Error', status: 604, error, options }\r\n  }\r\n}\r\n\r\nexport default httpRequest\r\n","/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-26 15:18:09\r\n * @LastEditTime : 2021-10-26 15:20:04\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/i18n/i18n.ts\r\n * @Description  : i18n\r\n ! 测试用\r\n */\r\n\r\nfunction getI18n(...argvs:Array<any>):string{\r\n  return argvs.join(' ')\r\n}\r\n\r\nexport default getI18n\r\n","/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-26 15:03:26\r\n * @LastEditTime : 2021-10-27 13:05:36\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/echoLog.ts\r\n * @Description  :\r\n */\r\nimport throwError from \"./tools/throwError\"\r\nimport getI18n from './i18n/i18n'\r\n\r\ninterface logStatus {\r\n  font?: JQuery\r\n  success: (text?: string, html?: boolean) => logStatus\r\n  error: (text?: string, html?: boolean) => logStatus\r\n  warning: (text?: string, html?: boolean) => logStatus\r\n  info: (text?: string, html?: boolean) => logStatus\r\n  view: (text?: string, html?: boolean) => logStatus\r\n}\r\nfunction echoLog({ type = 'text', text, url, id }: { type?: string, text?: string, url?: string, id?: string }): logStatus {\r\n  try {\r\n    let ele: JQuery = null\r\n    switch (type) {\r\n      case 'updateSteamCommunity':\r\n        ele = $(`<li>${getI18n('updateCommunityId')}<font></font></li>`)\r\n        break\r\n      case 'updateSteamStore':\r\n        ele = $(`<li>${getI18n('updateStoreId')}<font></font></li>`)\r\n        break\r\n      case 'joinSteamGroup':\r\n      case 'leaveSteamGroup':\r\n      case 'getSteamGroupId':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://steamcommunity.com/groups/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'subscribeForum':\r\n      case 'unsubscribeForum':\r\n      case 'getForumId':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://steamcommunity.com/app/${text}/discussions/\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'followCurator':\r\n      case 'unfollowCurator':\r\n      case 'getCuratorId':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://store.steampowered.com/${text.includes('/') ? text : `curator/${text}`}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'getDeveloperId':\r\n      case 'followDeveloper':\r\n      case 'unfollowDeveloper':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://store.steampowered.com/developer/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'getPublisherId':\r\n      case 'followPublisher':\r\n      case 'unfollowPublisher':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://store.steampowered.com/publisher/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'getFranchiseId':\r\n      case 'followFranchise':\r\n      case 'unfollowFranchise':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://store.steampowered.com/franchise/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'addWishlist':\r\n      case 'removeWishlist':\r\n      case 'followGame':\r\n      case 'unfollowGame':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://store.steampowered.com/app/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'favoriteWorkshop':\r\n      case 'unfavoriteWorkshop':\r\n      case 'getWorkshopAppId':\r\n      case 'voteupWorkshop':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'likeAnnouncements':\r\n        ele = $(`<li>${getI18n('likeAnnouncements')}<a href=\"${url}\" target=\"_blank\">${id}</a>...<font></font></li>`)\r\n        break\r\n      case 'changeCountry':\r\n        ele = $(`<li>${getI18n('changeCountry')}${text}...<font></font></li>`)\r\n        break\r\n      case 'joinDiscordServer':\r\n      case 'leaveDiscordServer':\r\n      case 'getDiscordGuild':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://discord.com/invite/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'updateDiscordAuth':\r\n        ele = $(`<li style=\"color:red;\">${getI18n('updateDiscordAuth')}</li>`)\r\n        break\r\n      case 'followTwitchChannel':\r\n      case 'unfollowTwitchChannel':\r\n      case 'getTwitchChannelId':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://www.twitch.tv/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'getInsInfo':\r\n        ele = $(`<li>${getI18n('getInsInfo')}<a href=\"https://www.instagram.com/${text}/\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'followIns':\r\n      case 'unfollowIns':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://www.instagram.com/${text}/\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'getTwitterUserId':\r\n      case 'followTwitterUser':\r\n      case 'unfollowTwitterUser':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://twitter.com/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'retweet':\r\n      case 'unretweet':\r\n        ele = $(`<li>${getI18n(type)}${text}...<font></font></li>`)\r\n        break\r\n      case 'joinReddit':\r\n      case 'leaveReddit':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://www.reddit.com/r/${text}/\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'followRedditUser':\r\n      case 'unfollowRedditUser':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://www.reddit.com/user/${text.replace('u_', '')}\" target=\"_blank\">${text.replace('u_', '')}</a>...<font></font></li>`)\r\n        break\r\n      case 'followYtbChannel':\r\n      case 'unfollowYtbChannel':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://www.youtube.com/channel/${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'likeYtbVideo':\r\n      case 'unlikeYtbVideo':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://www.youtube.com/watch?v=${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'getVkId':\r\n      case 'joinVkGroup':\r\n      case 'leaveVkGroup':\r\n      case 'joinVkPublic':\r\n      case 'leaveVkPublic':\r\n      case 'repostVkWall':\r\n        ele = $(`<li>${getI18n(type)}<a href=\"https://vk.com/${text}/\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'visitLink':\r\n        ele = $(`<li>${getI18n('visitLink')}<a href=\"${text}\" target=\"_blank\">${text}</a>...<font></font></li>`)\r\n        break\r\n      case 'text':\r\n        ele = $(`<li>${getI18n(text)}<font></font></li>`)\r\n        break\r\n      case 'html':\r\n        ele = $(text)\r\n        break\r\n      default:\r\n        ele = $(`<li>${getI18n('unknown')}:${type}...<font></font></li>`)\r\n        break\r\n    }\r\n    ele.addClass('card-text')\r\n    $('#fuck-task-info').append(ele)\r\n    ele[0].scrollIntoView()\r\n    const font: JQuery = ele.find('font')\r\n    const status: logStatus = {\r\n      font,\r\n      success(text = 'Success', html = false) {\r\n        this.font.attr('class', '').addClass('success')\r\n        html ? this.font.html(text) : this.font.text(text)\r\n        return this;\r\n      },\r\n      error(text = 'Error', html = false) {\r\n        this.font.attr('class', '').addClass('error')\r\n        html ? this.font.html(text) : this.font.text(text)\r\n        return this;\r\n      },\r\n      warning(text = 'Warning', html = false) {\r\n        this.font.attr('class', '').addClass('warning')\r\n        html ? this.font.html(text) : this.font.text(text)\r\n        return this;\r\n      },\r\n      info(text = 'Info', html = false) {\r\n        this.font.attr('class', '').addClass('info')\r\n        html ? this.font.html(text) : this.font.text(text)\r\n        return this;\r\n      },\r\n      view() {\r\n        this.font[0].scrollIntoView()\r\n        return this;\r\n      }\r\n    }\r\n    return status\r\n  } catch (error) {\r\n    throwError(error, 'echoLog')\r\n    const status = {\r\n      success: () => status,\r\n      error: () => status,\r\n      warning: () => status,\r\n      info: () => status,\r\n      view: () => status\r\n    }\r\n    return status\r\n  }\r\n}\r\n\r\nexport default echoLog\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-09-28 15:03:10\r\n * @LastEditTime : 2021-10-28 16:32:20\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Discord.ts\r\n * @Description  : Discord 加入&移除服务器\r\n ! 白名单处理\r\n */\r\n\r\nimport Social from './Social';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport throwError from '../tools/throwError';\r\nimport { unique, delay } from '../tools/tools';\r\nimport echoLog from '../echoLog';\r\n\r\nclass Discord extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Discord-${id}`) || { servers: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.discord || { servers: [] }; // eslint-disable-line new-cap\r\n    this.cache = GM_getValue<cache>('discordCache') || {}; // eslint-disable-line new-cap\r\n    this.auth = GM_getValue<auth>('discordAuth') || {}; // eslint-disable-line new-cap\r\n  }\r\n  // TODO:优化\r\n  async init(): Promise<boolean> {\r\n    try {\r\n      if (!this.auth.auth) {\r\n        echoLog({ type: 'updateDiscordAuth' });\r\n        await this.updateAuth();\r\n      }\r\n      const isVerified: boolean = await this.verifyAuth();\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init discord success!' });\r\n        return true;\r\n      }\r\n      GM_setValue('discordAuth', { auth: null }); // eslint-disable-line new-cap\r\n      if (await this.updateAuth()) {\r\n        echoLog({ text: 'Init discord success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init discord failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Discord.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 验证discord凭证是否失效\r\n  async verifyAuth(): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'text', text: 'verifyDiscordAuth' });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://discord.com/api/v6/users/@me',\r\n        method: 'HEAD',\r\n        headers: { authorization: this.auth.auth }\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Discord.verifyAuth');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async updateAuth() {\r\n    try {\r\n      const logStatus = echoLog({ type: 'text', text: 'updateDiscordAuth' });\r\n      return await new Promise((resolve) => {\r\n        const newTab = GM_openInTab('https://discord.com/channels/@me?updateDiscordAuth', // eslint-disable-line new-cap\r\n          { active: true, insert: true, setParent: true });\r\n        newTab.onclose = async () => {\r\n          const auth = GM_getValue<auth>('discordAuth')?.auth; // eslint-disable-line new-cap\r\n          if (auth) {\r\n            this.auth = { auth };\r\n            logStatus.success();\r\n            resolve(await this.verifyAuth());\r\n          } else {\r\n            logStatus.error('Error: Update discord auth failed!');\r\n            resolve(false);\r\n          }\r\n        };\r\n      });\r\n    } catch (error) {\r\n      throwError(error, 'Discord.updateAuth');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async joinServer(inviteId: string): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'joinDiscordServer', text: inviteId });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://discord.com/api/v6/invites/${inviteId}`,\r\n        method: 'POST',\r\n        dataType: 'json',\r\n        headers: { authorization: this.auth.auth }\r\n      });\r\n      if (result === 'Success' && data.status === 200) {\r\n        logStatus.success();\r\n        const guild = String(data.response?.guild?.id);\r\n        if (guild) {\r\n          // TODO: 优化\r\n          this.addId(inviteId, guild);\r\n          this.tasks.servers = unique([...this.tasks.servers, inviteId]);\r\n        }\r\n        return true;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Discord.joinServer');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async leaveServer(inviteId: string): Promise<boolean> {\r\n    try {\r\n      if (this.whiteList.servers.includes(inviteId)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: inviteId });\r\n        return true;\r\n      }\r\n      const guild = await this.getGuild(inviteId);\r\n      if (!guild) {\r\n        return false;\r\n      }\r\n      const logStatus = echoLog({ type: 'leaveDiscordServer', text: inviteId });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://discord.com/api/v6/users/@me/guilds/${guild}`,\r\n        method: 'DELETE',\r\n        headers: { authorization: this.auth.auth }\r\n      });\r\n      if (result === 'Success' && data.status === 204) {\r\n        logStatus.success();\r\n        return true;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Discord.leaveServer');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getGuild(inviteId: string): Promise<boolean | string> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'getDiscordGuild', text: inviteId });\r\n      const guild = this.getId(inviteId);\r\n      if (guild) {\r\n        logStatus.success();\r\n        return guild;\r\n      }\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://discord.com/invite/${inviteId}`,\r\n        method: 'GET'\r\n      });\r\n      if (result === 'Success' && data.status === 200) {\r\n        const guild = data.responseText.match(/https?:\\/\\/cdn\\.discordapp\\.com\\/icons\\/([\\d]+?)\\//)?.[1];\r\n        if (guild) {\r\n          logStatus.success();\r\n          this.addId(inviteId, guild);\r\n          return guild;\r\n        }\r\n        logStatus.error(`${result}:${statusText}(${status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Discord.getGuild');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // TODO:返回类型定义\r\n  async toggleServers({\r\n    doTask = true,\r\n    servers = [],\r\n    serverLinks = []\r\n  }: {\r\n    doTask: boolean,\r\n    servers: Array<string>,\r\n    serverLinks: Array<string>\r\n  }): Promise<boolean> {\r\n    try {\r\n      const prom = [];\r\n      const realServers = this.getRealParams('servers', servers, serverLinks, doTask, (link: string) => link.match(/invite\\/(.+)/)?.[1]);\r\n      if (realServers.length > 0) {\r\n        for (const server of realServers) {\r\n          prom.push(this[doTask ? 'joinServer' : 'leaveServer'](server));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return await Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Discord.toggleServers');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  addId(inviteId: string, guild: string): void {\r\n    this.cache[inviteId] = guild;\r\n    GM_setValue('discordCache', this.cache); // eslint-disable-line new-cap\r\n  }\r\n\r\n  getId(inviteId: string): string {\r\n    return this.cache[inviteId];\r\n  }\r\n  // TODO: id转换\r\n}\r\n\r\nexport default Discord;\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-09-29 12:54:16\r\n * @LastEditTime : 2021-10-28 16:32:27\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Instagram.ts\r\n * @Description  : Instagram 关注&取关用户\r\n */\r\nimport Social from './Social';\r\nimport echoLog from '../echoLog';\r\nimport throwError from '../tools/throwError';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport getI18n from '../i18n/i18n';\r\nimport { unique, delay } from '../tools/tools';\r\n\r\nclass Instagram extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Instagram-${id}`) || { users: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.instagram || { users: [] }; // eslint-disable-line new-cap\r\n  }\r\n\r\n  async init(): Promise<boolean> {\r\n    try {\r\n      const isVerified = await this.getUserInfo();\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init instagram success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init instagram failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Instagram.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getUserInfo(name = 'instagram'): Promise<string | boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: name === 'instagram' ? 'getInsInfo' : 'getInsUserId', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://www.instagram.com/${name}/`,\r\n        method: 'GET'\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.finalUrl.includes('accounts/login')) {\r\n          logStatus.error(`Error:${getI18n('loginIns')}`, true);\r\n          return false;\r\n        } else if (data.finalUrl.includes('www.instagram.com/challenge')) {\r\n          logStatus.error(`Error:${getI18n('insBanned')}`);\r\n          return false;\r\n        }\r\n        if (data.status === 200) {\r\n          const csrftoken: string = data.responseText.match(/\"csrf_token\":\"(.+?)\"/)?.[1];\r\n          const hash: string = data.responseText.match(/\"rollout_hash\":\"(.+?)\"/)?.[1];\r\n          if (name === 'instagram') {\r\n            if (csrftoken && hash) {\r\n              this.auth = { csrftoken, hash };\r\n              return true;\r\n            }\r\n            return false;\r\n          }\r\n          this.auth.csrftoken = csrftoken || this.auth.csrftoken;\r\n          this.auth.hash = csrftoken || this.auth.hash;\r\n          const id: string = data.responseText.match(/\"profilePage_([\\d]+?)\"/)?.[1];\r\n          if (id) {\r\n            logStatus.success();\r\n            return id;\r\n          }\r\n          logStatus.error('Error: Get ins data error!');\r\n          return false;\r\n        }\r\n        logStatus.error(`${result}:${statusText}(${status})`);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      throwError(error, 'Instagram.getUserInfo');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async followUser(name: string): Promise<boolean> {\r\n    try {\r\n      const id: string | boolean = await this.getUserInfo(name);\r\n      if (!id) return false;\r\n      const logStatus = echoLog({ type: 'followIns', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://www.instagram.com/web/friendships/${id}/follow/`,\r\n        method: 'POST',\r\n        dataType: 'json',\r\n        headers: {\r\n          'x-csrftoken': this.auth.csrftoken,\r\n          origin: 'https://www.instagram.com',\r\n          referer: `https://www.instagram.com/${name}/`,\r\n          'content-type': 'application/x-www-form-urlencoded',\r\n          'sec-fetch-site': 'same-origin',\r\n          'x-instagram-ajax': this.auth.hash\r\n        }\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200 && data.response?.result === 'following') {\r\n          logStatus.success();\r\n          this.tasks.users = unique([...this.tasks.users, name]);\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.response?.feedback_message || (`${data.statusText}(${data.status})`)}`); // eslint-disable-line camelcase\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Instagram.followUser');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async unfollowUser(name: string): Promise<boolean> {\r\n    try {\r\n      if (this.whiteList.users.includes(name)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: name });\r\n        return true;\r\n      }\r\n      const id: string | boolean = await this.getUserInfo(name);\r\n      if (!id) return false;\r\n      const logStatus = echoLog({ type: 'unfollowIns', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://www.instagram.com/web/friendships/${id}/unfollow/`,\r\n        method: 'POST',\r\n        dataType: 'json',\r\n        headers: {\r\n          'x-csrftoken': this.auth.csrftoken,\r\n          origin: 'https://www.instagram.com',\r\n          referer: `https://www.instagram.com/${name}/`,\r\n          'content-type': 'application/x-www-form-urlencoded',\r\n          'sec-fetch-site': 'same-origin',\r\n          'x-instagram-ajax': this.auth.hash\r\n        }\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200 && data.response?.status === 'ok') {\r\n          logStatus.success();\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Instagram.unfollowUser');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 改成处理任务\r\n  async toggle({ doTask = true, users = [], userLinks = [] }: { doTask: boolean, users: Array<string>, userLinks: Array<string> }): Promise<boolean> {\r\n    try {\r\n      const prom = [];\r\n      const realUsers = this.getRealParams('users', users, userLinks, doTask,\r\n        (link) => link.match(/https:\\/\\/www\\.instagram\\.com\\/(.+)?\\//)?.[1]);\r\n      if (realUsers.length > 0) {\r\n        for (const username of realUsers) {\r\n          prom.push(this[doTask ? 'followUser' : 'unfollowUser'](username));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return await Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Instagram.toggleUsers');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Instagram;\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-09-30 09:43:32\r\n * @LastEditTime : 2021-10-28 16:33:25\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Reddit.ts\r\n * @Description  : Reddit 订阅&取消订阅\r\n */\r\nimport Social from './Social';\r\nimport echoLog from '../echoLog';\r\nimport throwError from '../tools/throwError';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport getI18n from '../i18n/i18n';\r\nimport { unique, delay } from '../tools/tools';\r\n\r\nclass Reddit extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Reddit-${id}`) || { reddits: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.reddit || { reddits: [] }; // eslint-disable-line new-cap\r\n    this.auth = GM_getValue<auth>('redditAuth') || {}; // eslint-disable-line new-cap\r\n  }\r\n\r\n  // 通用化\r\n  async init(): Promise<boolean> {\r\n    try {\r\n      const isVerified: boolean = await this.updateToken();\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init reddit success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init reddit failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Reddit.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async updateToken(): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'text', text: 'updateRedditInfo' });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://www.reddit.com/',\r\n        method: 'GET',\r\n        nochche: true,\r\n        headers: {\r\n          'Cache-Control': 'no-cache'\r\n        }\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          if (data.responseText.includes('www.reddit.com/login/')) {\r\n            logStatus.error(`Error:${getI18n('loginReddit')}`, true);\r\n            return false;\r\n          }\r\n          const [, accessToken] = data.responseText.match(/\"accessToken\":\"(.*?)\",\"expires\":\"(.*?)\"/) || [];\r\n          if (accessToken) {\r\n            this.auth.token = accessToken;\r\n            logStatus.success();\r\n            return true;\r\n          }\r\n          logStatus.error('Error: Parameter \"accessToken\" not found!');\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Reddit.updateToken');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleTask({ name, doTask = true }: { name: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      if (!doTask && this.whiteList.reddits.includes(name)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: name });\r\n        return true;\r\n      }\r\n      let type: string = doTask ? 'joinReddit' : 'leaveReddit';\r\n      if (/^u_/.test(name)) {\r\n        type = doTask ? 'followRedditUser' : 'unfollowRedditUser';\r\n      }\r\n      const logStatus = echoLog({ type, text: name });\r\n\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://oauth.reddit.com/api/subscribe?redditWebClient=desktop2x&app=desktop2x-client-production&raw_json=1&gilding_detail=1',\r\n        method: 'POST',\r\n        headers: { authorization: `Bearer ${this.auth.token}`, 'content-type': 'application/x-www-form-urlencoded' },\r\n        data: $.param({\r\n          action: doTask ? 'sub' : 'unsub',\r\n          sr_name: name, // eslint-disable-line camelcase\r\n          api_type: 'json' // eslint-disable-line camelcase\r\n        })\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          if (doTask) this.tasks.reddits = unique([...this.tasks.reddits, name]);\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Reddit.toggleTask');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggle({\r\n    doTask = true,\r\n    reddits = [],\r\n    redditLinks = []\r\n  }: {\r\n    doTask: boolean,\r\n    reddits: Array<string>,\r\n    redditLinks: Array<string>\r\n  }): Promise<boolean> {\r\n    try {\r\n      const prom: Array<Promise<boolean>> = [];\r\n      const realReddits: Array<string> = this.getRealParams('reddits', reddits, redditLinks, doTask,\r\n        (link) => {\r\n          const name = link.match(/https?:\\/\\/www\\.reddit\\.com\\/r\\/([^/]*)/)?.[1];\r\n          const userName = link.match(/https?:\\/\\/www\\.reddit\\.com\\/user\\/([^/]*)/)?.[1];\r\n          if (userName) {\r\n            return name || userName;\r\n          }\r\n          return name;\r\n        });\r\n      if (realReddits.length > 0) {\r\n        for (const name of realReddits) {\r\n          prom.push(this.toggleTask({ name, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return await Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Reddit.toggle');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Reddit;\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-04 10:00:41\r\n * @LastEditTime : 2021-10-28 16:40:38\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Twitch.ts\r\n * @Description  : Twitch 关注/取关频道\r\n */\r\n\r\nimport Social from './Social';\r\nimport echoLog from '../echoLog';\r\nimport throwError from '../tools/throwError';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport getI18n from '../i18n/i18n';\r\nimport { unique, delay } from '../tools/tools';\r\n\r\ndeclare const commonOptions: {\r\n  headers?: {\r\n    'Client-ID': string\r\n  }\r\n};\r\n\r\nclass Twitch extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Twitch-${id}`) || { channels: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.twitch || { channels: [] }; // eslint-disable-line new-cap\r\n    this.auth = GM_getValue<auth>('twitchAuth') || {}; // eslint-disable-line new-cap\r\n  }\r\n\r\n  // 通用化,log\r\n  async init(): Promise<boolean> {\r\n    try {\r\n      const isVerified: boolean = await this.verifyToken();\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init twitch success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init twitch failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async verifyToken(): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'text', text: 'verifyTwitchAuth' });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://gql.twitch.tv/gql',\r\n        method: 'POST',\r\n        dataType: 'json',\r\n        headers: { Authorization: `OAuth ${this.auth.authToken}`, 'Client-Id': this.auth.clientId },\r\n        data: (\r\n          '[{\"operationName\":\"FrontPageNew_User\",\"variables\":{\"limit\":1},\"extensions\":{\"persistedQuery\":{\"version\":1,' +\r\n          '\"sha256Hash\":\"64bd07a2cbaca80699d62636d966cf6395a5d14a1f0a14282067dcb28b13eb11\"}}}]'\r\n        )\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200 && data.response?.[0]?.data?.currentUser) {\r\n          logStatus.success();\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.verifyToken');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // 优化自动更新\r\n  updateToken(notice: boolean): void {\r\n    try {\r\n      const authToken = Cookies.get('auth-token');\r\n      const isLogin = !!Cookies.get('login');\r\n      if (authToken && isLogin) {\r\n        this.auth.authToken = authToken;\r\n        this.auth.clientId = commonOptions?.headers['Client-ID'];\r\n        // GM_setValue('twitchInfo', twitchInfo)\r\n        if (notice) {\r\n          Swal.fire({\r\n            title: getI18n('updateTwitchInfoSuccess'),\r\n            icon: 'success'\r\n          });\r\n        }\r\n      } else {\r\n        if (notice) {\r\n          Swal.fire({\r\n            title: getI18n('needLogin'),\r\n            icon: 'warning'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.updateToken');\r\n      if (notice) {\r\n        Swal.fire({\r\n          title: getI18n('updateTwitchInfoError'),\r\n          icon: 'error'\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async toggleChannel({ name, doTask = true }: { name: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      if (!doTask && this.whiteList.channels.includes(name)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: name });\r\n        return true;\r\n      }\r\n      const channelId: string | boolean = await this.getChannelId(name);\r\n      if (!channelId) return false;\r\n      const logStatus = echoLog({ type: `${doTask ? '' : 'un'}followTwitchChannel`, text: name });\r\n      const followData: string = (\r\n        `[{\"operationName\":\"FollowButton_FollowUser\",\"variables\":{\"input\":{\"disableNotifications\":false,\"targetID\":\"${channelId}` +\r\n        '\"}},\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"3efee1acda90efdff9fef6e6b4a29213be3ee490781c5b54469717b6131ffdfe\"}}}]'\r\n      );\r\n      const unfollowData: string = (\r\n        `[{\"operationName\":\"FollowButton_UnfollowUser\",\"variables\":{\"input\":{\"targetID\":\"${channelId}\"}},` +\r\n        '\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"d7fbdb4e9780dcdc0cc1618ec783309471cd05a59584fc3c56ea1c52bb632d41\"}}}]'\r\n      );\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://gql.twitch.tv/gql',\r\n        method: 'POST',\r\n        dataType: 'json',\r\n        headers: { Authorization: `OAuth ${this.auth.authToken}` },\r\n        data: doTask ? followData : unfollowData\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          if (doTask) {\r\n            this.tasks.channels = unique([...this.tasks.channels, name]);\r\n          }\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.toggleChannel');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getChannelId(name: string): Promise<string | boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'getTwitchChannelId', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://gql.twitch.tv/gql',\r\n        method: 'POST',\r\n        headers: { Authorization: `OAuth ${this.auth.authToken}`, 'Client-Id': this.auth.clientId },\r\n        responseType: 'json',\r\n        data: (\r\n          `[{\"operationName\":\"ActiveWatchParty\",\"variables\":{\"channelLogin\":\"${name}\"},` +\r\n          '\"extensions\":{\"persistedQuery\":{\"version\":1,\"sha256Hash\":\"4a8156c97b19e3a36e081cf6d6ddb5dbf9f9b02ae60e4d2ff26ed70aebc80a30\"}}}]'\r\n        )\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          const channelId = String(data.response?.[0]?.data?.user?.id);\r\n          if (channelId) {\r\n            logStatus.success();\r\n            return channelId;\r\n          }\r\n          logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.getChannelId');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggle({\r\n    doTask = true,\r\n    channels = [],\r\n    channelLinks = []\r\n  }: {\r\n    doTask: boolean,\r\n    channels: Array<string>,\r\n    channelLinks: Array<string>\r\n  }): Promise<boolean> {\r\n    try {\r\n      const prom = [];\r\n      const realChannels = this.getRealParams('channels', channels, channelLinks, doTask,\r\n        (link) => link.match(/https:\\/\\/www\\.twitch\\.tv\\/(.+)/)?.[1]);\r\n      if (realChannels.length > 0) {\r\n        for (const channel of realChannels) {\r\n          prom.push(this.toggleChannel({ name: channel, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.toggle');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Twitch;\r\n/*\r\nfunction updateTwitchInfo(notice) {\r\n  try {\r\n    const authToken = Cookies.get('auth-token')\r\n    const isLogin = !!Cookies.get('login')\r\n    if (authToken && isLogin) {\r\n      twitchInfo.authToken = authToken\r\n      twitchInfo.isLogin = isLogin\r\n      twitchInfo.clientId = commonOptions?.headers['Client-ID']\r\n      twitchInfo.updateTime = new Date().getTime()\r\n      GM_setValue('twitchInfo', twitchInfo)\r\n      if (notice) {\r\n        Swal.fire({\r\n          title: getI18n('updateTwitchInfoSuccess'),\r\n          icon: 'success'\r\n        })\r\n      }\r\n    } else {\r\n      if (notice) {\r\n        Swal.fire({\r\n          title: getI18n('needLogin'),\r\n          icon: 'warning'\r\n        })\r\n      }\r\n    }\r\n  } catch (e) {\r\n    if (debug) console.error(e)\r\n    if (notice) {\r\n      Swal.fire({\r\n        title: getI18n('updateTwitchInfoError'),\r\n        icon: 'error'\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n*/\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-04 10:36:57\r\n * @LastEditTime : 2021-10-28 17:11:45\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Twitter.ts\r\n * @Description  : Twitter 关注/取关用户,转推/取消转推推文\r\n */\r\n\r\nimport Social from './Social';\r\nimport echoLog from '../echoLog';\r\nimport throwError from '../tools/throwError';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport { unique, delay } from '../tools/tools';\r\n\r\nclass Twitter extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Twitter-${id}`) || { users: [], retweets: [], likes: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.twitter || { users: [], retweets: [], likes: [] }; // eslint-disable-line new-cap\r\n    this.auth = GM_getValue<auth>('twitterAuth') || {}; // eslint-disable-line new-cap\r\n  }\r\n\r\n  // 通用化,log\r\n  async init():Promise<boolean> {\r\n    try {\r\n      const isVerified = false;// await this.verifyToken(); // TODO\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init twitter success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init twitter failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitter.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // TODO: 添加跳转\r\n  async updateToken():Promise<boolean> {\r\n    try {\r\n      if (!window.location.href.includes('login')) {\r\n        if (Cookies.get('twid')) {\r\n          const ct0 = Cookies.get('ct0');\r\n          if (ct0) {\r\n            this.auth.ct0 = ct0;\r\n            return true;\r\n          }\r\n          window.close();\r\n          return false;\r\n          // GM_setValue('twitterInfo', twitterInfo)\r\n        }\r\n      }\r\n      this.auth.isLogin = false;\r\n      // GM_setValue('twitterInfo', twitterInfo)\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitter.updateToken');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleUser({ name, doTask = true }: { name: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      if (!doTask && this.whiteList.users.includes(name)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: name });\r\n        return true;\r\n      }\r\n      const userId: string | boolean = await this.getUserId(name);\r\n      if (!userId) return false;\r\n      const logStatus = echoLog({ type: `${doTask ? '' : 'un'}followTwitterUser`, text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://api.twitter.com/1.1/friendships/${doTask ? 'create' : 'destroy'}.json`,\r\n        method: 'POST',\r\n        headers: {\r\n          authorization: 'Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA',\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'x-csrf-token': this.auth.ct0\r\n        },\r\n        /* eslint-disable camelcase */\r\n        data: $.param({\r\n          include_profile_interstitial_type: 1,\r\n          include_blocking: 1,\r\n          include_blocked_by: 1,\r\n          include_followed_by: 1,\r\n          include_want_retweets: 1,\r\n          include_mute_edge: 1,\r\n          include_can_dm: 1,\r\n          include_can_media_tag: 1,\r\n          skip_status: 1,\r\n          id: userId\r\n        })\r\n        /* eslint-enable camelcase */\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          if (doTask) this.tasks.users = unique([...this.tasks.users, name]);\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitter.toggleUser');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getUserId(name: string): Promise<string | boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'getTwitterUserId', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: (\r\n          'https://api.twitter.com/graphql/-xfUfZsnR_zqjFd-IfrN5A/UserByScreenName' +\r\n          `?variables=%7B%22screen_name%22%3A%22${name}%22%2C%22withHighlightedLabel%22%3Atrue%7D`\r\n        ),\r\n        method: 'GET',\r\n        headers: {\r\n          authorization: 'Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA',\r\n          'content-type': 'application/json'\r\n        },\r\n        responseType: 'json',\r\n        anonymous: true\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          let response = data.response || (typeof data.responseText === 'object' ? data.responseText : null);\r\n          if (!response) {\r\n            try {\r\n              response = JSON.parse(data.responseText);\r\n            } catch (error) {\r\n              response = null;\r\n            }\r\n          }\r\n          const userId = String(response?.data?.user?.rest_id); // eslint-disable-line camelcase\r\n          if (userId) {\r\n            logStatus.success();\r\n            return userId;\r\n          }\r\n          logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitter.getUserId');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleRetweet({ retweetId, doTask = true }: { retweetId: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      if (!doTask && this.whiteList.retweets.includes(retweetId)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: retweetId });\r\n        return true;\r\n      }\r\n      const logStatus = echoLog({ type: `${doTask ? '' : 'un'}retweet`, text: retweetId });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://api.twitter.com/1.1/statuses/${doTask ? '' : 'un'}retweet.json`,\r\n        method: 'POST',\r\n        headers: {\r\n          authorization: 'Bearer AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA',\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n          'x-csrf-token': this.auth.ct0\r\n        },\r\n        data: $.param({\r\n          tweet_mode: 'extended', // eslint-disable-line camelcase\r\n          id: retweetId\r\n        }),\r\n        responseType: 'json'\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200 || (data.status === 403 && data.response?.errors?.[0]?.code === 327)) {\r\n          logStatus.success();\r\n          if (doTask) this.tasks.retweets = unique([...this.tasks.retweets, name]);\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Twitter.toggleRetweet');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggle({ doTask = true, users = [], userLinks = [], retweets = [], retweetLinks = [] }:\r\n    { doTask: boolean, users: Array<string>, userLinks: Array<string>, retweets: Array<string>, retweetLinks: Array<string> }): Promise<boolean> {\r\n    try {\r\n      const prom = [];\r\n      const realUsers = this.getRealParams('users', users, userLinks, doTask, (link) => link.match(/https:\\/\\/twitter\\.com\\/(.+)/)?.[1]);\r\n      const realRetweets = this.getRealParams('retweets', retweets, retweetLinks, doTask,\r\n        (link) => link.match(/https:\\/\\/twitter\\.com\\/.*?\\/status\\/([\\d]+)/)?.[1]);\r\n      if (realUsers.length > 0) {\r\n        for (const user of realUsers) {\r\n          prom.push(this.toggleUser({ name: user, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      if (realRetweets.length > 0) {\r\n        for (const retweet of realRetweets) {\r\n          prom.push(this.toggleRetweet({ retweetId: retweet, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Twitch.toggle');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Twitter;\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-04 11:47:59\r\n * @LastEditTime : 2021-10-28 17:11:43\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Vk.ts\r\n * @Description  : Vk 加入/退出群组，关注/取关用户，转发动态\r\n */\r\nimport Social from './Social';\r\nimport echoLog from '../echoLog';\r\nimport throwError from '../tools/throwError';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport getI18n from '../i18n/i18n';\r\nimport { unique, delay } from '../tools/tools';\r\n\r\ninterface dataParams {\r\n  type: string\r\n  groupAct?: string\r\n  groupId?: string\r\n  groupHash?: string\r\n  publicHash?: string\r\n  publicPid?: string\r\n  publicJoined?: boolean\r\n}\r\nclass Vk extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Vk-${id}`) || { groups: [], publics: [], walls: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.vk || { groups: [], publics: [], walls: [] }; // eslint-disable-line new-cap\r\n    this.auth = GM_getValue<auth>('vkAuth') || {}; // eslint-disable-line new-cap\r\n  }\r\n\r\n  // 通用化,log\r\n  async init(): Promise<boolean> {\r\n    try {\r\n      const isVerified: boolean = await this.verifyToken(); // TODO\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init vk success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init vk failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Vk.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async verifyToken(): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'text', text: 'verifyVkLogin' });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://vk.com/im',\r\n        method: 'GET'\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.finalUrl.includes('vk.com/login')) {\r\n          logStatus.error(`Error:${getI18n('loginVk')}`, true);\r\n          return false;\r\n        }\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Vk.verifyToken');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleGroup(name: string, dataParam: dataParams, doTask = true): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: doTask ? 'joinVkGroup' : 'leaveVkGroup', text: name });\r\n      if ((dataParam.groupAct === 'enter' && !doTask) || (dataParam.groupAct === 'leave' && doTask)) {\r\n        logStatus.success();\r\n        return true;\r\n      }\r\n      const reqData: {\r\n        act: string\r\n        al: number\r\n        gid: string\r\n        hash: string\r\n        context?: string\r\n      } = {\r\n        act: doTask ? 'enter' : 'leave',\r\n        al: 1,\r\n        gid: dataParam.groupId,\r\n        hash: dataParam.groupHash\r\n      };\r\n      if (doTask) reqData.context = '_';\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://vk.com/al_groups.php',\r\n        method: 'POST',\r\n        headers: {\r\n          origin: 'https://vk.com',\r\n          referer: `https://vk.com/${name}`,\r\n          'content-type': 'application/x-www-form-urlencoded'\r\n        },\r\n        data: $.param(reqData)\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          if (doTask) this.tasks.groups = unique([...this.tasks.groups, name]);\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Vk.toggleGroup');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async togglePublic(name: string, dataParam: dataParams, doTask = true): Promise<boolean> {\r\n    try {\r\n      const logStatus = echoLog({ type: doTask ? 'joinVkPublic' : 'leaveVkPublic', text: name });\r\n      if ((dataParam.publicJoined && doTask) || (!dataParam.publicJoined && !doTask)) {\r\n        logStatus.success();\r\n        return true;\r\n      }\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://vk.com/al_public.php',\r\n        method: 'POST',\r\n        headers: {\r\n          origin: 'https://vk.com',\r\n          referer: `https://vk.com/${name}`,\r\n          'content-type': 'application/x-www-form-urlencoded'\r\n        },\r\n        data: $.param({\r\n          act: doTask ? 'a_enter' : 'a_leave',\r\n          al: 1,\r\n          pid: dataParam.publicPid,\r\n          hash: dataParam.publicHash\r\n        })\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          logStatus.success();\r\n          if (doTask) this.tasks.publics = unique([...this.tasks.publics, name]);\r\n          return true;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Vk.togglePublic');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleWall(name: string, doTask: boolean): Promise<boolean> {\r\n    if (!doTask) return false;\r\n    try {\r\n      const logStatus = echoLog({ type: 'repostVkWall', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: 'https://vk.com/like.php',\r\n        method: 'POST',\r\n        headers: {\r\n          origin: 'https://vk.com',\r\n          referer: `https://vk.com/${name}`,\r\n          'content-type': 'application/x-www-form-urlencoded'\r\n        },\r\n        data: $.param({\r\n          act: 'publish_box',\r\n          al: 1,\r\n          object: name\r\n        })\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          const hash: string = data.responseText.match(/shHash:[\\s]*'(.*?)'/)?.[1];\r\n          if (hash) {\r\n            const { result: resultR, statusText: statusTextR, status: statusR, data: dataR } = await httpRequest({\r\n              url: 'https://vk.com/like.php',\r\n              method: 'POST',\r\n              headers: {\r\n                origin: 'https://vk.com',\r\n                referer: `https://vk.com/${name}`,\r\n                'content-type': 'application/x-www-form-urlencoded'\r\n              },\r\n              /* eslint-disable camelcase */\r\n              data: $.param({\r\n                Message: '',\r\n                act: 'a_do_publish',\r\n                al: 1,\r\n                close_comments: 0,\r\n                friends_only: 0,\r\n                from: 'box',\r\n                hash,\r\n                list: '',\r\n                mark_as_ads: 0,\r\n                mute_notifications: 0,\r\n                object: name,\r\n                ret_data: 1,\r\n                to: 0\r\n              })\r\n              /* eslint-enable camelcase */\r\n            });\r\n            if (resultR === 'Success') {\r\n              if (dataR.status === 200) {\r\n                const jsonData = JSON.parse(dataR.responseText?.replace('<!--', '') || '{}');\r\n                if (jsonData?.payload?.[1]?.[1]?.share_my === true) { // eslint-disable-line camelcase\r\n                  logStatus.success();\r\n                  if (doTask) this.tasks.walls = unique([...this.tasks.walls, name]);\r\n                  return true;\r\n                }\r\n              }\r\n              logStatus.error(`Error:${dataR.statusText}(${dataR.status})`);\r\n              return false;\r\n            }\r\n            logStatus.error(`${resultR}:${statusTextR}(${statusR})`);\r\n            return false;\r\n          }\r\n          logStatus.error('Error: Get \"hash\" failed');\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Vk.toggleWall');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getId(name: string): Promise<dataParams | false> {\r\n    try {\r\n      if (/^wall-/.test(name)) return { type: 'wall' };\r\n      const logStatus = echoLog({ type: 'getVkId', text: name });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://vk.com/${name}`,\r\n        method: 'GET'\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          const [, groupAct, groupId, groupHash] = data.responseText.match(/Groups.(enter|leave)\\(.*?,.*?([\\d]+?), '(.*?)'/) || [];\r\n          const publicHash = data.responseText.match(/\"enterHash\":\"(.*?)\"/)?.[1];\r\n          const publicPid = data.responseText.match(/\"public_id\":([\\d]+?),/)?.[1];\r\n          const publicJoined = !data.responseText.includes('Public.subscribe');\r\n          if (groupAct && groupId && groupHash) {\r\n            logStatus.success();\r\n            return { groupAct, groupId, groupHash, type: 'group' };\r\n          } else if (publicHash && publicPid) {\r\n            logStatus.success();\r\n            return { publicHash, publicPid, publicJoined, type: 'public' };\r\n          } else if (data.responseText.includes('Wall.sendPost')) {\r\n            logStatus.success();\r\n            return { type: 'wall' };\r\n          }\r\n          logStatus.error('Error: Parameter \"id\" not found!');\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Vk.getId');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleVk({ name, doTask = true }: { name: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      if (!doTask && [...this.whiteList.groups, ...this.whiteList.publics, ...this.whiteList.walls].includes(name)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: name });\r\n        return true;\r\n      }\r\n      const formatName: string = name.replace(/\\/$/, '');\r\n      const data = await this.getId(formatName);\r\n      if (!data) return;\r\n      switch (data.type) {\r\n      case 'group':\r\n        return await this.toggleGroup(formatName, data, doTask);\r\n      case 'public':\r\n        return await this.togglePublic(formatName, data, doTask);\r\n      case 'wall':\r\n        return await this.toggleWall(formatName, doTask);\r\n      default:\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      throwError(error, 'Vk.toggleVk');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggle({ doTask = true, names = [], nameLinks = [] }: { doTask: boolean, names: Array<string>, nameLinks: Array<string> }): Promise<boolean> {\r\n    try {\r\n      const prom = [];\r\n      const realNames = this.getRealParams('names', names, nameLinks, doTask, (link) => link.match(/https:\\/\\/vk\\.com\\/([^/]+)/)?.[1]);\r\n      if (realNames.length > 0) {\r\n        for (const name of realNames) {\r\n          prom.push(this.toggleVk({ name, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Vk.toggle');\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Vk;\r\n/*\r\n\r\nasync function toggleVk(name, join = true) {\r\n  try {\r\n    if (whiteList.enable && !join && whiteList.vk.vk.includes(name)) {\r\n      return { result: 'Skiped', statusText: 'OK', status: 605 }\r\n    }\r\n    name = name.replace(/\\/$/, '')\r\n    const data = await getVkId(name)\r\n    if (!data) return\r\n    switch (data.type) {\r\n      case 'group':\r\n        await toggleVkGroup(name, data, join)\r\n        break\r\n      case 'public':\r\n        await toggleVkPublic(name, data, join)\r\n        break\r\n      case 'wall':\r\n        await toggleVkWall(name, join)\r\n        break\r\n    }\r\n  } catch (e) {\r\n    throwError(e, 'toggleVk')\r\n  }\r\n}\r\n\r\nasync function toggleVkActions({ website, type, elements, action, toFinalUrl = {} }) {\r\n  try {\r\n    const isLogin = await verifyVkLogin()\r\n    if (!isLogin) return\r\n    for (const element of unique(elements)) {\r\n      let name = element\r\n      if (website === 'giveawaysu' && toFinalUrl[element]) {\r\n        const toFinalUrlElement = toFinalUrl[element] || ''\r\n        name = toFinalUrlElement.match(/https:\\/\\/vk\\.com\\/([^/]+)/)?.[1]\r\n      }\r\n      if (name) {\r\n        await toggleVk(name, action === 'fuck')\r\n      }\r\n    }\r\n  } catch (e) {\r\n    throwError(e, 'toggleVkActions')\r\n  }\r\n}\r\nexport { toggleVkActions }\r\n*/\r\n","/* eslint-disable import/no-unresolved, import/extensions */\r\n/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-04 12:18:06\r\n * @LastEditTime : 2021-10-28 17:11:40\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/scripts/social/Youtube.ts\r\n * @Description  : Youtube 订阅/取消订阅频道，点赞/取消点赞视频\r\n */\r\n\r\nimport Social from './Social';\r\nimport echoLog from '../echoLog';\r\nimport throwError from '../tools/throwError';\r\nimport httpRequest from '../tools/httpRequest';\r\nimport getI18n from '../i18n/i18n';\r\nimport { unique, delay } from '../tools/tools';\r\n\r\ninterface youtubeInfo {\r\n  params?: {\r\n    apiKey: string\r\n    client: {\r\n      visitorData: string\r\n    }\r\n    request: {\r\n      sessionId: string\r\n    }\r\n    videoId?: string\r\n    likeParams?: string\r\n    channelId?: string\r\n  }\r\n  needLogin?: boolean\r\n}\r\ninterface likeVideoData {\r\n  context: {\r\n    client: {\r\n      visitorData: string\r\n    },\r\n    request: {\r\n      sessionId: string,\r\n      internalExperimentFlags: Array<any>,\r\n      consistencyTokenJars: Array<any>\r\n    },\r\n    user: object\r\n  },\r\n  target: {\r\n    videoId: string\r\n  },\r\n  params?: string\r\n}\r\nclass Youtube extends Social {\r\n  // TODO: 任务识别\r\n  constructor(id: string) {\r\n    super();\r\n    this.tasks = GM_getValue<socialTasks>(`Youtube-${id}`) || { channels: [], likes: [] }; // eslint-disable-line new-cap\r\n    this.whiteList = GM_getValue<whiteList>('whiteList')?.youtube || { channels: [], likes: [] }; // eslint-disable-line new-cap\r\n    this.auth = GM_getValue<auth>('youtubeAuth') || {}; // eslint-disable-line new-cap\r\n  }\r\n\r\n  // 通用化,log\r\n  async init(): Promise<boolean> {\r\n    try {\r\n      const isVerified = false; // await this.verifyToken(); // TODO\r\n      if (isVerified) {\r\n        echoLog({ text: 'Init youtube success!' });\r\n        return true;\r\n      }\r\n      echoLog({ text: 'Init youtube failed!' });\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Youtube.init');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getInfo(link: string, type: string): Promise<youtubeInfo> {\r\n    try {\r\n      const logStatus = echoLog({ type: 'text', text: 'getYtbToken' });\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: link,\r\n        method: 'GET'\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          if (data.responseText.includes('accounts.google.com/ServiceLogin?service=youtube')) {\r\n            logStatus.error(`Error:${getI18n('loginYtb')}`, true);\r\n            return { needLogin: true };\r\n          }\r\n          const apiKey: string = data.responseText.match(/\"INNERTUBE_API_KEY\":\"(.*?)\"/)?.[1];\r\n          const context: string = (\r\n            (\r\n              data.responseText.match(/\\(\\{\"INNERTUBE_CONTEXT\":([\\w\\W]*?)\\}\\)/) ||\r\n              data.responseText.match(/\"INNERTUBE_CONTEXT\":([\\w\\W]*?\\}),\"INNERTUBE/)\r\n            )?.[1] || '{}'\r\n          );\r\n          const { client, request } = JSON.parse(context);\r\n          if (apiKey && client && request) {\r\n            client.hl = 'en';\r\n            if (type === 'channel') {\r\n              const channelId = data.responseText.match(/<meta itemprop=\"channelId\" content=\"(.+?)\">/)?.[1];\r\n              if (channelId) {\r\n                logStatus.success();\r\n                return { params: { apiKey, client, request, channelId } };\r\n              }\r\n              logStatus.error('Error: Get \"channelId\" failed!');\r\n              return {};\r\n            } else if (type === 'likeVideo') {\r\n              const videoId: string = data.responseText.match(/<link rel=\"shortlinkUrl\" href=\"https:\\/\\/youtu\\.be\\/(.*?)\">/)?.[1];\r\n              const likeParams: string = data.responseText.match(/\"likeParams\":\"(.*?)\"/)?.[1];\r\n              if (videoId) {\r\n                logStatus.success();\r\n                return { params: { apiKey, client, request, videoId, likeParams } };\r\n              }\r\n              logStatus.error('Error: Get \"videoId\" failed!');\r\n              return {};\r\n            }\r\n            logStatus.error('Error: Unknown type');\r\n            return {};\r\n          }\r\n          logStatus.error('Error: Parameter \"apiKey\" not found!');\r\n          return {};\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return {};\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return {};\r\n    } catch (error) {\r\n      throwError(error, 'Youtube.getInfo');\r\n      return {};\r\n    }\r\n  }\r\n\r\n  getToken(notice: boolean): void {\r\n    try {\r\n      const PAPISID = Cookies.get('__Secure-3PAPISID');\r\n      if (PAPISID) {\r\n        this.auth.PAPISID = PAPISID;\r\n        GM_setValue('youtubeInfo', this.auth); // eslint-disable-line new-cap\r\n        if (notice) {\r\n          Swal.fire({\r\n            title: getI18n('updateYtbInfoSuccess'),\r\n            icon: 'success'\r\n          });\r\n        }\r\n      } else {\r\n        if (notice) {\r\n          Swal.fire({\r\n            title: getI18n('updateYtbInfoError'),\r\n            icon: 'error'\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      throwError(error, 'Youtube.getToken');\r\n      if (notice) {\r\n        Swal.fire({\r\n          title: getI18n('updateYtbInfoError'),\r\n          icon: 'error'\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async toggleChannel({ link, doTask = true }: { link: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      const { params, needLogin } = await this.getInfo(link, 'channel');\r\n      const { apiKey, client, request, channelId } = params || {};\r\n\r\n      if (!doTask && this.whiteList.channels.includes(channelId)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: channelId });\r\n        return true;\r\n      }\r\n\r\n      if (needLogin) {\r\n        echoLog({ type: 'custom', text: getI18n('loginYtb') });\r\n        return false;\r\n      }\r\n      if (!apiKey) {\r\n        echoLog({ type: 'custom', text: '\"getYtbToken\" failed' });\r\n        return false;\r\n      }\r\n\r\n      const logStatus = echoLog({ type: doTask ? 'followYtbChannel' : 'unfollowYtbChannel', text: channelId });\r\n      const nowTime = parseInt(String(new Date().getTime() / 1000), 10);\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://www.youtube.com/youtubei/v1/subscription/${doTask ? '' : 'un'}subscribe?key=${apiKey}`,\r\n        method: 'POST',\r\n        headers: {\r\n          origin: 'https://www.youtube.com',\r\n          referer: `https://www.youtube.com/channel/${channelId}`,\r\n          'content-type': 'application/json',\r\n          'x-goog-authuser': '0',\r\n          'x-goog-visitor-id': client.visitorData,\r\n          'x-origin': 'https://www.youtube.com',\r\n          authorization: `SAPISIDHASH ${nowTime}_${sha1(`${nowTime} ${this.auth.PAPISID} https://www.youtube.com`)}`\r\n        },\r\n        data: JSON.stringify({\r\n          context: {\r\n            client,\r\n            request: {\r\n              sessionId: request.sessionId,\r\n              internalExperimentFlags: [],\r\n              consistencyTokenJars: []\r\n            },\r\n            user: {}\r\n          },\r\n          channelIds: [channelId],\r\n          params: doTask ? 'EgIIAhgA' : 'CgIIAhgA'\r\n        })\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          if (\r\n            (\r\n              doTask &&\r\n              (/\"subscribed\": true/.test(data.responseText) || data.responseText.includes('The subscription already exists'))\r\n            ) || (!doTask && /\"subscribed\": false/.test(data.responseText))\r\n          ) {\r\n            logStatus.success();\r\n            if (doTask) this.tasks.channels = unique([...this.tasks.channels, link]);\r\n            return true;\r\n          }\r\n          logStatus.error(getI18n('tryUpdateYtbAuth'), true);\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Youtube.toggleChannel');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggleLikeVideo({ link, doTask = true }: { link: string, doTask: boolean }): Promise<boolean> {\r\n    try {\r\n      const { params, needLogin } = await this.getInfo(link, 'likeVideo');\r\n      const { apiKey, client, request, videoId, likeParams } = params || {};\r\n\r\n      if (!doTask && this.whiteList.likes.includes(videoId)) {\r\n        // TODO: 直接echo\r\n        echoLog({ type: 'whiteList', text: link });\r\n        return true;\r\n      }\r\n\r\n      if (needLogin) {\r\n        echoLog({ type: 'text', text: `${getI18n('loginYtb')}` });\r\n        return false;\r\n      }\r\n\r\n      if (!apiKey) {\r\n        echoLog({ type: 'text', text: '\"getYtbToken\" failed' });\r\n        return false;\r\n      }\r\n\r\n      const logStatus = echoLog({ type: doTask ? 'likeYtbVideo' : 'unlikeYtbVideo', text: videoId });\r\n      const nowTime = parseInt(String(new Date().getTime() / 1000), 10);\r\n      const likeVideoData: likeVideoData = {\r\n        context: {\r\n          client,\r\n          request: {\r\n            sessionId: request.sessionId,\r\n            internalExperimentFlags: [],\r\n            consistencyTokenJars: []\r\n          },\r\n          user: {}\r\n        },\r\n        target: {\r\n          videoId\r\n        }\r\n      };\r\n      if (doTask) {\r\n        if (likeParams) {\r\n          likeVideoData.params = likeParams;\r\n        } else {\r\n          logStatus.error('Empty likeParams');\r\n          return false;\r\n        }\r\n      }\r\n      const { result, statusText, status, data } = await httpRequest({\r\n        url: `https://www.youtube.com/youtubei/v1/like/${doTask ? '' : 'remove'}like?key=${apiKey}`,\r\n        method: 'POST',\r\n        headers: {\r\n          origin: 'https://www.youtube.com',\r\n          referer: `https://www.youtube.com/watch?v=${videoId}`,\r\n          'content-type': 'application/json',\r\n          'x-goog-authuser': '0',\r\n          'x-goog-visitor-id': client.visitorData,\r\n          'x-origin': 'https://www.youtube.com',\r\n          authorization: `SAPISIDHASH ${nowTime}_${sha1(`${nowTime} ${this.auth.PAPISID} https://www.youtube.com`)}`\r\n        },\r\n        data: JSON.stringify(likeVideoData)\r\n      });\r\n      if (result === 'Success') {\r\n        if (data.status === 200) {\r\n          if (\r\n            (doTask && data.responseText.includes('Added to Liked videos')) ||\r\n            (!doTask &&\r\n              (data.responseText.includes('Removed from Liked videos') || data.responseText.includes('Dislike removed'))\r\n            )\r\n          ) {\r\n            logStatus.success();\r\n            if (doTask) this.tasks.likes = unique([...this.tasks.likes, link]);\r\n            return true;\r\n          }\r\n          logStatus.error(getI18n('tryUpdateYtbAuth'), true);\r\n          return false;\r\n        }\r\n        logStatus.error(`Error:${data.statusText}(${data.status})`);\r\n        return false;\r\n      }\r\n      logStatus.error(`${result}:${statusText}(${status})`);\r\n      return false;\r\n    } catch (error) {\r\n      throwError(error, 'Youtube.toggleLikeVideo');\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async toggle({\r\n    doTask = true,\r\n    channelLinks = [],\r\n    videoLinks = []\r\n  }: {\r\n    doTask: boolean,\r\n    channelLinks: Array<string>,\r\n    videoLinks: Array<string>\r\n  }): Promise<boolean> {\r\n    try {\r\n      const prom = [];\r\n      const realChannels = this.getRealParams('channels', [], channelLinks, doTask, (link) => {\r\n        if (/^https:\\/\\/www\\.google\\.com.*?\\/url\\?.*?url=https:\\/\\/www.youtube.com\\/.*/.test(link)) {\r\n          return link.match(/url=(https:\\/\\/www.youtube.com\\/.*)/)?.[1];\r\n        }\r\n        return link;\r\n      });\r\n      const realLikes = this.getRealParams('likes', [], videoLinks, doTask, (link) => {\r\n        if (/^https:\\/\\/www\\.google\\.com.*?\\/url\\?.*?url=https:\\/\\/www.youtube.com\\/.*/.test(link)) {\r\n          return link.match(/url=(https:\\/\\/www.youtube.com\\/.*)/)?.[1];\r\n        }\r\n        return link;\r\n      });\r\n      if (realChannels.length > 0) {\r\n        for (const channel of realChannels) {\r\n          prom.push(this.toggleChannel({ link: channel, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      if (realLikes.length > 0) {\r\n        for (const video of realLikes) {\r\n          prom.push(this.toggleLikeVideo({ link: video, doTask }));\r\n          await delay(1000);\r\n        }\r\n      }\r\n      // TODO: 返回值处理\r\n      return Promise.all(prom).then(() => true);\r\n    } catch (error) {\r\n      throwError(error, 'Vk.toggle');\r\n      return false;\r\n    }\r\n  }\r\n}\r\nexport default Youtube;\r\n","/*\r\n * @Author       : HCLonely\r\n * @Date         : 2021-10-26 15:44:54\r\n * @LastEditTime : 2021-10-27 14:10:32\r\n * @LastEditors  : HCLonely\r\n * @FilePath     : /auto-task-new/src/index.ts\r\n * @Description  :\r\n */\r\n\r\nimport Discord from \"./scripts/social/Discord\";\r\nimport Instagram from \"./scripts/social/Instagram\";\r\nimport Reddit from \"./scripts/social/Reddit\";\r\nimport Twitch from \"./scripts/social/Twitch\";\r\nimport Twitter from \"./scripts/social/Twitter\";\r\nimport Vk from \"./scripts/social/Vk\";\r\nimport Youtube from \"./scripts/social/Youtube\";\r\n\r\nif (window.location.hostname === 'discord.com' && window.location.search === '?updateDiscordAuth'){// todo: 登录\r\n  GM_setValue('discordAuth', { auth: window.localStorage.getItem('token').replace(/^\"|\"$/g, '') });\r\n  window.close();\r\n}\r\nwindow.onload = () => {\r\n  unsafeWindow.Discord = Discord\r\n  unsafeWindow.Instagram = Instagram\r\n  unsafeWindow.Reddit = Reddit\r\n  unsafeWindow.Twitch = Twitch\r\n  unsafeWindow.Twitter = Twitter\r\n  unsafeWindow.Vk = Vk\r\n  unsafeWindow.Youtube = Youtube\r\n\r\n  $('body').append(`<div id=\"fuck-task-info\" style=\"position:fixed;bottom:10px;right:10px;width:300px;max-width:60%;\"></div>`)\r\n}\r\n"],"sourceRoot":""}